console.log("Content script loaded - I'm here I promise lol");
var cssRuleExistsForHighlight = false;

if (!CSS.highlights) {
    console.log("CSS.highlights not found, this is not supported in your browser");
}

function runWhenLoaded() {
    console.log("DOM fully loaded and parsed, finding words to highlight");
    checkCSSHighlightAndAdd();
    highlightWord("Sharepoint", "SharePoint");
}

// Function generated by Copilot - thank you :-)
function checkCSSHighlightAndAdd() {

    if(cssRuleExistsForHighlight === false){
        console.log("CSS rule not found, adding it now");

        // Create a new style element
        const style = document.createElement('style');
        // Add the CSS rule to the style element
        style.textContent = `
        ::highlight(search-result-highlight) {
            background-color: yellow;
            color: black;
          }
        `;

        // Append the style element to the head of the document
        document.head.append(style);

        cssRuleExistsForHighlight = true;
    }
}

//With help of sample from -https://github.com/MicrosoftEdge/Demos/blob/main/custom-highlight-api/index.html
function highlightWord(word) {



    // Get all the text nodes in the document
    const treeWalker = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT);

    const allTextNodes = [];
    let currentNode = treeWalker.nextNode();
    while (currentNode) {
        allTextNodes.push(currentNode);
        currentNode = treeWalker.nextNode();
    }

    const ranges = allTextNodes
        .map((el) => {
            return { el, text: el.textContent };
        })
        .filter(({ text }) => text.includes(word))
        .map(({ text, el }) => {

            console.log("Found word: " + word);

            // Find all instances of word in el.textContent
            const indices = [];
            let startPos = 0;
            while (startPos < text.length) {
                const index = text.indexOf(word, startPos);
                if (index === -1) break;
                indices.push(index);
                startPos = index + word.length;
            }

            return indices.map((index) => {
                const range = new Range();
                range.setStart(el, index);
                range.setEnd(el, index + word.length);
                return range;
            });
        });

    const highlight = new Highlight(...ranges.flat());
    CSS.highlights.set("search-result-highlight", highlight);
}

// Run the function when the DOM is loaded from the webNavigation API
//chrome.webNavigation.onCompleted.addListener(runWhenLoaded);
if (document.readyState === 'loading') {  // Loading hasn't finished yet
    document.addEventListener('DOMContentLoaded', runWhenLoaded);
} else {  // `DOMContentLoaded` has already fired
    runWhenLoaded();
}